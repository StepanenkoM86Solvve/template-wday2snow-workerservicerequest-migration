<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      version="EE-3.5.2"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd">
    <data-mapper:config name="Pojo_To_Map" transformationGraphPath="pojo_to_map.grf" doc:name="Pojo_To_Map"/>

    
    <batch:job name="createServiceNowAssets">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <wd-hr:get-workers config-ref="Workday_Human_Resource"  doc:name="Workday Human Resource" workersRequest-ref="#[org.mule.templates.WorkersRequest.create(${migration.startDate})]"/>

            <set-payload value="#[payload.responseData.worker]" doc:name="Extract a list of Workers"/>
            <custom-filter doc:name="Filter duplicate workers" class="org.mule.templates.WorkersDeduplicationFilter"/>
        </batch:input>
        <batch:process-records>
<!--             <batch:step name="CheckIfNewHire" > -->
<!--                 <enricher source="payload" target="recordVars['isNewHire']" doc:name="store in recordVars['isNewHire']"> -->
<!--                     <component class="org.mule.templates.TransactionsProcessor" doc:name="Iterate through transaction logs"/> -->
<!--                 </enricher> -->
<!--                 <enricher source="payload" target="recordVars['isSales']" doc:name="store in recordVars['isSales']"> -->
<!--                     <component class="org.mule.templates.DepartmentProcessor" doc:name="Check for sales organization"/> -->
<!--                 </enricher> -->
<!--             </batch:step> -->
            
            <batch:step name="getUserInSnowStep">
                <enricher source="#[payload]" target="#[recordVars['userInSnow']]" doc:name="store result in record var 'userInSnow'">
                    <choice doc:name="Choice">
                        <when expression="#[payload.workerData.userAccountData == null]">
                            <servicenow:get-records config-ref="ServiceNow" type="SYS_USER" doc:name="query user in ServiceNow by email and name">
                                <servicenow:get-records-request>
                                    <servicenow:get-records-request key="lastName">#[payload.workerData.getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getLastName()]</servicenow:get-records-request>
                                    <servicenow:get-records-request key="email">#[payload.workerData.getPersonalData().getContactData().getEmailAddressData().get(0).getEmailAddress()]</servicenow:get-records-request>
                                    <servicenow:get-records-request key="firstName">#[payload.workerData.getPersonalData().getNameData().getPreferredNameData().getNameDetailData().getFirstName()]</servicenow:get-records-request>
                                </servicenow:get-records-request>
                            </servicenow:get-records>
                        </when>
                        <when expression="#[payload.workerData.userAccountData != null &amp;&amp; payload.workerData.userAccountData.userName != null]">
                            <servicenow:get-records config-ref="ServiceNow" type="SYS_USER" doc:name="query user in ServiceNow by username">
                                <servicenow:get-records-request>
                                    <servicenow:get-records-request key="userName">#[payload.workerData.userAccountData.userName]</servicenow:get-records-request>
                                </servicenow:get-records-request>
                            </servicenow:get-records>
                        </when>
                        <otherwise>
                            <set-payload value="#[return null]" doc:name="Set Payload"/>
                        </otherwise>
                    </choice>
                </enricher>

 
            </batch:step>
            <batch:step name="mapWorkdayWorkerToSnowMap">
                <data-mapper:transform config-ref="Pojo_To_Map" doc:name="Pojo To Map"/>


            </batch:step>

            <batch:step name="defineIdInServiceNowStep" filter-expression="#[recordVars['userInSnow'] is NullPayload]">
                <expression-component doc:name="define Id in Service Now instance"><![CDATA[ payload.put('sysId', recordVars['userInSnow'].getGetRecordsResult().isEmpty() ? null : recordVars['userInSnow'].getGetRecordsResult().get(0).getSysId());]]></expression-component>

            </batch:step>

            <batch:step name="createUsersInServiceNowStep" accept-expression="!(payload instanceof NullPayload) &amp;&amp; payload['sysId'] == null">
 
                <logger message="User to create: #[payload]" level="INFO" doc:name="Log user to create"/>
                <expression-component doc:name="Expression"><![CDATA[payload.remove('username');]]></expression-component>
                <enricher source="#[payload]" target="#[recordVars['userInSnow']]" doc:name="Message Enricher">
                    <servicenow:insert config-ref="ServiceNow" type="SYS_USER" doc:name="ServiceNow">
                        <servicenow:insert-request ref="#[payload]"/>
                    </servicenow:insert>
                </enricher>


            </batch:step>
<!--             <batch:step name="updateUsersInServiceNowStep" accept-expression="!(payload instanceof NullPayload) &amp;&amp; payload['sysId'] != null &amp;&amp; payload['email'] != null"> -->
<!--                 <logger message="User to update: #[payload]" level="INFO" doc:name="Log user to update"/> -->
<!--                 <servicenow:update config-ref="ServiceNow" type="SYS_USER" doc:name="ServiceNow"> -->
<!--                     <servicenow:update-request ref="#[payload]"/> -->
<!--                 </servicenow:update> -->
<!--             </batch:step> -->
            
            <batch:step name="InsertPcRequest" >
                <flow-ref name="insertPcRequest" doc:name="Flow Reference"/>

            </batch:step>

            <batch:step name="InsertDeskRequest" >
                <flow-ref name="insertDeskRequest" doc:name="Flow Reference"/>

            </batch:step>

        </batch:process-records>
        <batch:on-complete>
            <json:object-to-json-transformer doc:name="Convert Batch results to JSON"/>
            <logger level="INFO" doc:name="Log the batch result" message="Batch completed: #[payload]"/>
        </batch:on-complete>
    </batch:job>
    <sub-flow name="insertPcRequest" doc:name="insertPcRequest">
        <expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['approval'] = "Requested";
output['active'] = true;
output['assignedTo'] = recordVars['userInSnow'].getRecordsResult[0].sysId; // '${snow.pc.assignedTo}';
output['location'] = '${snow.locationA}';
output['price'] = new BigDecimal('${snow.pc.price}');
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['dueDate'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.pc.deliveryDays}) * 86400000));
payload = output;]]></expression-component>
        <enricher source="payload" target="recordVars['request1']" doc:name="store in recordVars['request1']">
            <flow-ref name="insertRequestFlow" doc:name="call insertRequestFlow"/>
        </enricher>
        <expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['active'] = true;
output['approval'] = "requested";
output['catItem'] = '${snow.pc.model}';
output['request'] = recordVars['request1']['sysId'];
output['parent'] = recordVars['request1']['sysId'];
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['estimatedDelivery'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.pc.deliveryDays}) * 86400000));
output['price'] = ${snow.pc.price};
payload = output;]]></expression-component>
        <flow-ref name="insertItemFlow" doc:name="call insertItemFlow"/>
    </sub-flow>
    <sub-flow name="insertDeskRequest" doc:name="insertDeskRequest">
        <expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['approval'] = "Requested";
output['active'] = true;
output['assignedTo'] = '${snow.desk.assignedTo}';
output['location'] = '${snow.locationA}';
output['price'] = new BigDecimal('${snow.desk.price}');
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['dueDate'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.desk.deliveryDays}) * 86400000));
payload = output;]]></expression-component>
        <enricher source="payload" target="recordVars['request2']" doc:name="store in recordVars['request1']">
            <flow-ref name="insertRequestFlow" doc:name="call insertRequestFlow"/>
        </enricher>
        <expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['active'] = true;
output['approval'] = "requested";
output['catItem'] = '${snow.desk.model}';
output['approvalSet'] = recordVars['userInSnow'].getRecordsResult[0].sysId;
output['request'] = recordVars['request2']['sysId'];
output['parent'] = recordVars['request2']['sysId'];
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['estimatedDelivery'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.desk.deliveryDays}) * 86400000));
output['price'] = ${snow.desk.price};
payload = output;]]></expression-component>
        <flow-ref name="insertItemFlow" doc:name="call insertItemFlow"/>
    </sub-flow>

    <sub-flow name="insertRequestFlow" doc:name="insertRequestFlow">
        <servicenow:insert config-ref="ServiceNow" type="SC_REQUEST" doc:name="ServiceNow">
            <servicenow:insert-request ref="#[payload]"/>
        </servicenow:insert>
        <logger message="request: #[payload]" level="INFO" doc:name="Log the insert response"/>
    </sub-flow>
    <sub-flow name="insertItemFlow" doc:name="insertItemFlow">
        <servicenow:insert config-ref="ServiceNow" type="SC_REQ_ITEM" doc:name="ServiceNow"/>
        <json:object-to-json-transformer doc:name="Convert InsertResponse to JSON"/>
        <logger message="request item: #[payload]" level="INFO" doc:name="Log the insert respone"/>
    </sub-flow>

</mule>
