<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" 
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
		
	<batch:job name="createServiceNowAssets">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		
		<batch:input>

            <dw:transform-message doc:name="Create GetWorkers Request">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	requestCriteria: {
		excludeInactiveWorkers		: true,
		excludeContingentWorkers	: false,
		excludeEmployees			: false,
		transactionLogCriteriaData: [
			{
				transactionDateRangeData: {
					updatedFrom		: p('migration.startDate'),
					updatedThrough	: now - |PT6S|
				}
			}
		]
	},
	
	responseGroup: {
		includeRoles				: true,
		includePersonalInformation	: true,
		includeOrganizations		: true, 
		includeEmploymentInformation: true,
		includeReference			: true
	}
} as :object {class: "com.workday.hr.GetWorkersRequestType"}]]></dw:set-payload>
            </dw:transform-message>

			<wd-hr:get-workers config-ref="Workday_Human_Resource"
				doc:name="Workday Human Resource - Get workers"
				 />
			<set-payload value="#[payload.responseData == null ? null : payload.responseData.worker]"
				doc:name="Extract a list of Workers" />
			<custom-filter doc:name="Filter duplicate workers"
				class="org.mule.templates.WorkersDeduplicationFilter" />
		</batch:input>
		<batch:process-records>

			<batch:step name="insertPcRequest">
				<flow-ref name="insertPcRequest" doc:name="Call insertPcRequest" />

			</batch:step>

			<batch:step name="insertDeskRequest">
				<flow-ref name="insertDeskRequest" doc:name="Call insertDeskRequest" />

			</batch:step>

		</batch:process-records>
		<batch:on-complete>

			<scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
                </processor-chain>
                <processor-chain>
                    <parse-template location="email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="Send mail"/>
                </processor-chain>

			</scatter-gather>
		</batch:on-complete>
	</batch:job>
	<sub-flow name="insertPcRequest" >
        <dw:transform-message doc:name="Prepare InsertPC Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_request
%var pcDeliveryDays = p('snow.pc.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active          : true,
		ns0#approval        : "Requested",
		ns0#"assigned_to"   : p('snow.pc.assignedTo'),
		ns0#location        : p('snow.location'),
		ns0#price           : p('snow.pc.price'),
		ns0#dueDate         : (now + toPeriod(pcDeliveryDays)) as :date
	}
}
]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="insertRequestFlow" doc:name="Call insertRequestFlow"/>
        <dw:transform-message doc:name="Prepare InsertPCItem">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_req_item
%var pcDeliveryDays = p('snow.pc.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active            : true,
		ns0#approval          : "Requested",
		ns0#"assigned_to"     : p('snow.pc.assignedTo'),
		ns0#"cat_item"        : p('snow.pc.model'),
		ns0#parent            : payload.sysId,
		ns0#request           : payload.sysId,
		ns0#price             : p('snow.pc.price'),
		ns0#estimatedDelivery : (now + toPeriod(pcDeliveryDays)) as :date
	}
}
]]></dw:set-payload>
        </dw:transform-message>
		<flow-ref name="insertItemFlow" doc:name="Call insertItemFlow" />
	</sub-flow>
	<sub-flow name="insertDeskRequest" >
        <dw:transform-message doc:name="Prepare InsertDesk Request">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_request
%var deskDeliveryDays = p('snow.desk.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active          : true,
		ns0#approval        : "Requested",
		ns0#"assigned_to"   : p('snow.desk.assignedTo'),
		ns0#location        : p('snow.location'),
		ns0#price           : p('snow.desk.price'),
		ns0#dueDate         : (now + toPeriod(deskDeliveryDays)) as :date
	}
}
]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="insertRequestFlow" doc:name="Call insertRequestFlow"/>
        <dw:transform-message doc:name="Prepare InsertDesk Item">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sc_req_item
%var deskDeliveryDays = p('snow.desk.deliveryDays')
%var toPeriod = (days) -> "PT$(24*days)H" as :period
---
{
	ns0#insert: {
		ns0#active            : true,
		ns0#approval          : "Requested",
		ns0#"assigned_to"     : p('snow.desk.assignedTo'),
		ns0#"cat_item"        : p('snow.desk.model'),
		ns0#request           : payload.sysId,
		ns0#parent            : payload.sysId,
		ns0#price             : p('snow.desk.price'),
		ns0#estimatedDelivery : (now + toPeriod(deskDeliveryDays)) as :date
	}
}
]]></dw:set-payload>
        </dw:transform-message>
		<flow-ref name="insertItemFlow" doc:name="Call insertItemFlow" />
	</sub-flow>

	<sub-flow name="insertRequestFlow" >
        <servicenow:invoke config-ref="ServiceNow" type="sc_request||insert" doc:name="Insert Request"/>

        <dw:transform-message doc:name="Extract sysId">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
sysId : payload.insertResponse.sys_id]]></dw:set-payload>
        </dw:transform-message>


		<logger message="request: #[payload]" level="INFO"
			doc:name="Log the insert response" />
	</sub-flow>
	<sub-flow name="insertItemFlow" >
        <servicenow:invoke config-ref="ServiceNow" type="sc_req_item||insert" doc:name="Insert Request Item"/>

        <dw:transform-message doc:name="Extract sysId">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
sysId : payload.insertResponse.sys_id]]></dw:set-payload>
        </dw:transform-message>

		<logger message="request item: #[payload]" level="INFO"
			doc:name="Log the insert respone" />
	</sub-flow>

</mule>
