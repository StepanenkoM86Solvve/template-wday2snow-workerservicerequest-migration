<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	version="EE-3.5.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd">
	<data-mapper:config name="Pojo_To_Map"
		transformationGraphPath="pojo_to_map.grf" doc:name="Pojo_To_Map" />
				    
    <flow name="mainFlow" doc:name="mainFlow">
        <batch:execute name="createServiceNowAssets" doc:name="Batch Execute"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

		
	<batch:job name="createServiceNowAssets">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
			<wd-hr:get-workers config-ref="Workday_Human_Resource"
				doc:name="Workday Human Resource - Get workers"
				workersRequest-ref="#[org.mule.templates.WorkersRequest.create(${migration.startDate})]" />
			<set-payload value="#[payload.responseData.worker]"
				doc:name="Extract a list of Workers" />
			<custom-filter doc:name="Filter duplicate workers"
				class="org.mule.templates.WorkersDeduplicationFilter" />
		</batch:input>
		<batch:process-records>

			<batch:step name="insertPcRequest">
				<flow-ref name="insertPcRequest" doc:name="Call insertPcRequest" />

			</batch:step>

			<batch:step name="insertDeskRequest">
				<flow-ref name="insertDeskRequest" doc:name="Call insertDeskRequest" />

			</batch:step>

		</batch:process-records>
		<batch:on-complete>

			<scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
                </processor-chain>
                <processor-chain>
                    <parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="Send mail"/>
                </processor-chain>

			</scatter-gather>
		</batch:on-complete>
	</batch:job>
	<sub-flow name="insertPcRequest" doc:name="insertPcRequest">
		<expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['approval'] = "Requested";
output['active'] = true;
output['assignedTo'] = '${snow.pc.assignedTo}';
output['location'] = '${snow.location}';
output['price'] = new BigDecimal('${snow.pc.price}');
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['dueDate'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.pc.deliveryDays}) * 86400000));
payload = output;]]></expression-component>
		<enricher source="payload" target="recordVars['request1']"
			doc:name="store in recordVars['request1']">
			<flow-ref name="insertRequestFlow" doc:name="Call insertRequestFlow" />
		</enricher>
		<expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['active'] = true;
output['approval'] = "requested";
output['catItem'] = '${snow.pc.model}';
output['approvalSet'] = '${snow.pc.assignedTo}';
output['request'] = recordVars['request1']['sysId'];
output['parent'] = recordVars['request1']['sysId'];
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['estimatedDelivery'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.pc.deliveryDays}) * 86400000));
output['price'] = ${snow.pc.price};
payload = output;]]></expression-component>
		<flow-ref name="insertItemFlow" doc:name="Call insertItemFlow" />
	</sub-flow>
	<sub-flow name="insertDeskRequest" doc:name="insertDeskRequest">
		<expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['approval'] = "Requested";
output['active'] = true;
output['assignedTo'] = '${snow.desk.assignedTo}';
output['location'] = '${snow.location}';
output['price'] = new BigDecimal('${snow.desk.price}');
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['dueDate'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.desk.deliveryDays}) * 86400000));
payload = output;]]></expression-component>
		<enricher source="payload" target="recordVars['request2']"
			doc:name="store in recordVars['request1']">
			<flow-ref name="insertRequestFlow" doc:name="Call insertRequestFlow" />
		</enricher>
		<expression-component doc:name="Expression"><![CDATA[java.util.Map output = new java.util.HashMap();
output['active'] = true;
output['approval'] = "requested";
output['catItem'] = '${snow.desk.model}';
output['approvalSet'] = '${snow.desk.assignedTo}';
output['request'] = recordVars['request2']['sysId'];
output['parent'] = recordVars['request2']['sysId'];
java.text.DateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");		
output['estimatedDelivery'] = df.format(new java.util.Date(System.currentTimeMillis() + new java.lang.Integer(${snow.desk.deliveryDays}) * 86400000));
output['price'] = ${snow.desk.price};
payload = output;]]></expression-component>
		<flow-ref name="insertItemFlow" doc:name="Call insertItemFlow" />
	</sub-flow>

	<sub-flow name="insertRequestFlow" doc:name="insertRequestFlow">
		<servicenow:insert config-ref="ServiceNow" type="SC_REQUEST"
			doc:name="ServiceNow">
			<servicenow:insert-request ref="#[payload]" />
		</servicenow:insert>
		<logger message="request: #[payload]" level="INFO"
			doc:name="Log the insert response" />
	</sub-flow>
	<sub-flow name="insertItemFlow" doc:name="insertItemFlow">
		<servicenow:insert config-ref="ServiceNow" type="SC_REQ_ITEM"
			doc:name="ServiceNow" />
		<json:object-to-json-transformer
			doc:name="Convert InsertResponse to JSON" />
		<logger message="request item: #[payload]" level="INFO"
			doc:name="Log the insert respone" />
	</sub-flow>

</mule>
